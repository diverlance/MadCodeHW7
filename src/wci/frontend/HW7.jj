/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HW7.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  IGNORE_CASE=true;
                                           
                                                            
               
                 }PARSER_BEGIN(HtScrape)package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;
 
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class HtScrape/*@bgen(jjtree)*/implements HtScrapeTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTHtScrapeState jjtree = new JJTHtScrapeState();

/*@egen*/  public static void main(String args [])  {    Reader sr = new StringReader("input.txt");    HtScrape ht = new HtScrape(sr);    try {
        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader("input.txt"));
      	StringBuilder sb = new StringBuilder();
		String line = "";
		while((line = br.readLine()) != null)
			sb.append(line+"\r\n"); 
     	
        java.io.StringReader sr = new java.io.StringReader(sb.toString());
        HtScrape parser = new HtScrape(sr);
       
       SimpleNode n = HtScrape.Program();
     	n.dump(">");
      System.out.println("Thank you.");
        }
        catch (ParseException ex) {
            ex.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }  }}PARSER_END(HtScrape)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}
TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}/*TOKEN :  IDENTIFIERS{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >} */
TOKEN: /*HtScrape Tokens */
{
  	<STRING_LITERAL:"\"" (~["\n","\r","\""])* ("\""|"\n"|"\r"|"\r\n")>
  	{ debugStream.println("STRING_LITERAL token: " + matchedToken.image); }
 	| 
    <CHARACTER:
    "'"(["a"-"z", "A"-"Z", "_"]|"\\"|["0"-"9"])"'"
    >  { debugStream.println("CHARACTER token: " + matchedToken.image); }
    |
    <DIGIT:
    ["0"-"9"]
    >
  	| //reserved words
    <IF: "if" >
    { debugStream.println("IF token: " + matchedToken.image); }
    |
    <ELSE: "else" >
    { debugStream.println("ELSE token: " + matchedToken.image); }
    |
    < THEN: "then" >
    { debugStream.println("THEN token: " + matchedToken.image); }
    | 
    <EXIT: "exit" >
    { debugStream.println("EXIT token: " + matchedToken.image); }
    |
    < THROW: "throw" >
    { debugStream.println("THROW token: " + matchedToken.image); }
    | 
    < BREAK: "break" >
    { debugStream.println("BREAK token: " + matchedToken.image); }
    |
    < VOID: "void" >
    { debugStream.println("VOID token: " + matchedToken.image); }
    |
    < RETURN: "return" >
    { debugStream.println("RETURN token: " + matchedToken.image); }
    |
    < INT: "int" >
    { debugStream.println("INT token: " + matchedToken.image); }
    |
    < NUMBER: "number" >
    { debugStream.println("NUMBER token: " + matchedToken.image); }
  	|
  	< STRING: "string">
  	{ debugStream.println("STRING token: " + matchedToken.image); }
 	| 
    < TRUE: "true" >
    { debugStream.println("TRUE token: " + matchedToken.image); }
    |
    < FALSE: "false" >
    { debugStream.println("FALSE token: " + matchedToken.image); }
    | 
    < TRY: "try" >
    { debugStream.println("TRY token: " + matchedToken.image); }
    |
    < CATCH: "catch" >
    { debugStream.println("CATCH token: " + matchedToken.image); }
    |
    < FOR: "for" >
    { debugStream.println("FOR token: " + matchedToken.image); }
    |
    < NULL: "null" >
    { debugStream.println("NULL token: " + matchedToken.image); }
    |
    < TABLE: "table" >
    { debugStream.println("TABLE token: " + matchedToken.image); }
    |
    < TABLE_DATA: "table_data" >
    { debugStream.println("TABLE_DATA token: " + matchedToken.image); }
    |
    < COLOR: "color" >
    { debugStream.println("COLOR token: " + matchedToken.image); }
  	| 
    < GET: "get" >
    { debugStream.println("GET token: " + matchedToken.image); }
    |
    < PRINT: "print" >
    { debugStream.println("PRINT token: " + matchedToken.image); }
    |
    < CLOSE: "close" >
	{ debugStream.println("CLOSE token: " + matchedToken.image); }
 	|
 	< FILE: "file" >
    { debugStream.println("FILE token: " + matchedToken.image); }
    |
    < LOAD: "load" >
	{ debugStream.println("LOAD token: " + matchedToken.image); }
 	|
 	< GET_TABLE: "getTable" >
	{ debugStream.println("GET_TABLE token: " + matchedToken.image); }
 	|
 	< GET_DATA: "getData" >
	{ debugStream.println("GET_DATA token: " + matchedToken.image); }
 	|
 	< GET_COLOR: "getColor" >
	{ debugStream.println("GET_COLOR token: " + matchedToken.image); }
 	|  
    <IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9","_", "-"])* >  
   	{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
    |
	// SPECIAL SYMBOLS
    < LEFT_PAREN: "(" >
    { debugStream.println("LEFT_PAREN token: " + matchedToken.image); }
  	|
  	< RIGHT_PAREN: ")" >
  	{ debugStream.println("RIGHT_PAREN token: " + matchedToken.image); }
 	|
 	< LEFT_CURLY: "{" >
	{ debugStream.println("LEFT_CURLY token: " + matchedToken.image); }
	| 
 	< RIGHT_CURLY: "}" >
	{ debugStream.println("RIGHT_CURLY token: " + matchedToken.image); }
	| 
	< PLUS: "+" >
 	{ debugStream.println("PLUS token: " + matchedToken.image); }
	|
	< MINUS: "-" >
 	{ debugStream.println("MINUS token: " + matchedToken.image); }
	|
 	< EQUALS: "=" >
 	{ debugStream.println("EQUALS token: " + matchedToken.image); }
	|
	< LESS_THAN: "<" >
	{ debugStream.println("LESS_THAN token: " + matchedToken.image); }
	|
	< GREATER_THAN: ">" >
	{ debugStream.println("GREATER_THAN token: " + matchedToken.image); }
	|
	< BANG: "!" >
	{ debugStream.println("BANG token: " + matchedToken.image); }
	|
	< COMMA: "," >
	{ debugStream.println("COMMA token: " + matchedToken.image); }
	|
	< PERIOD: "." >
	{ debugStream.println("PERIOD token: " + matchedToken.image); }
	|
	< SEMICOLON: ";" >
	{ debugStream.println("SEMICOLON token: " + matchedToken.image); }
	|
	< AT_SIGN: "@" >
	{ debugStream.println("AT_SIGN token: " + matchedToken.image); }
	|
	< POUND_SIGN: "#" >
	{ debugStream.println("POUND_SIGN token: " + matchedToken.image); }
}

	//production rules
	SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) Program */
          try {
/*@egen*/
	  (Statement())+
	  < EOF >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("\n** Successfully parsed an entire Program!\n");
	  return jjtn000; }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	  
	}
	
	void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) Statement */
          try {
/*@egen*/
	  (
	    IntDeclaration() |
	    StringDeclaration() |
	    SimpleAssignment() |
	    FileDeclaration() |
	    LoadStatement() |
	    TableDeclaration() |
	    GetTableStatement() |
	    TableDataDeclaration() |
	    GetTableDataStatement() |
	    ColorDeclaration() |
	    GetColorStatement() |
	    PrintStatement() |
	    CloseStatement() |
	    IfStatement()
	  )/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void IntDeclaration(): {/*@bgen(jjtree) IntDeclaration */
  ASTIntDeclaration jjtn000 = new ASTIntDeclaration(JJTINTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) IntDeclaration */
          try {
/*@egen*/
	  < INT >
	  < IDENTIFIER >
	  < EQUALS >
	  < DIGIT >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed an Int Declaration!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	
	void SimpleAssignment() : {/*@bgen(jjtree) SimpleAssignment */
  ASTSimpleAssignment jjtn000 = new ASTSimpleAssignment(JJTSIMPLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) SimpleAssignment */
          try {
/*@egen*/
	  < IDENTIFIER >
	  < EQUALS >
	  (< DIGIT >|< STRING_LITERAL >)
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Simple Assignment!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void StringDeclaration() : {/*@bgen(jjtree) StringDeclaration */
  ASTStringDeclaration jjtn000 = new ASTStringDeclaration(JJTSTRINGDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) StringDeclaration */
          try {
/*@egen*/
	  < STRING >
	  < IDENTIFIER >
	  < EQUALS >
	  < STRING_LITERAL >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a String Declaration!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void FileDeclaration() : {/*@bgen(jjtree) FileDeclaration */
  ASTFileDeclaration jjtn000 = new ASTFileDeclaration(JJTFILEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) FileDeclaration */
          try {
/*@egen*/
	  < FILE >
	  < IDENTIFIER >
	  < EQUALS >
	  LoadStatement()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a File Declaration!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void LoadStatement() : {/*@bgen(jjtree) LoadStatement */
  ASTLoadStatement jjtn000 = new ASTLoadStatement(JJTLOADSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) LoadStatement */
          try {
/*@egen*/
	  < LOAD >
	  < LEFT_PAREN >
	  < IDENTIFIER >
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Load Statement!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void TableDeclaration(): {/*@bgen(jjtree) TableDeclaration */
  ASTTableDeclaration jjtn000 = new ASTTableDeclaration(JJTTABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) TableDeclaration */
          try {
/*@egen*/
	  < TABLE >
	  < IDENTIFIER >
	  < EQUALS >
	  GetTableStatement()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Table Declaration!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void GetTableStatement(): {/*@bgen(jjtree) GetTableStatement */
  ASTGetTableStatement jjtn000 = new ASTGetTableStatement(JJTGETTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) GetTableStatement */
          try {
/*@egen*/
	  < GET_TABLE >
	  < LEFT_PAREN >
	  < IDENTIFIER >
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a GetTable Statement!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void TableDataDeclaration(): {/*@bgen(jjtree) TableDataDeclaration */
  ASTTableDataDeclaration jjtn000 = new ASTTableDataDeclaration(JJTTABLEDATADECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) TableDataDeclaration */
          try {
/*@egen*/
	  < TABLE_DATA >
	  < IDENTIFIER >
	  < EQUALS >
	  GetTableDataStatement()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a TableData Declaration!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void GetTableDataStatement(): {/*@bgen(jjtree) GetTableDataStatement */
  ASTGetTableDataStatement jjtn000 = new ASTGetTableDataStatement(JJTGETTABLEDATASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) GetTableDataStatement */
          try {
/*@egen*/
	  < GET_DATA >
	  < LEFT_PAREN >
	  MultipleParams()
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a GetTableData Statement!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void ColorDeclaration(): {/*@bgen(jjtree) ColorDeclaration */
  ASTColorDeclaration jjtn000 = new ASTColorDeclaration(JJTCOLORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) ColorDeclaration */
          try {
/*@egen*/
	  < COLOR >
	  < IDENTIFIER >
	  < EQUALS >
	  GetColorStatement()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Color Declaration!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void GetColorStatement(): {/*@bgen(jjtree) GetColorStatement */
  ASTGetColorStatement jjtn000 = new ASTGetColorStatement(JJTGETCOLORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) GetColorStatement */
          try {
/*@egen*/
	  < GET_COLOR >
	  < LEFT_PAREN >
	  MultipleParams()
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a GetColor Statement!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	
	void MultipleParams() : {/*@bgen(jjtree) MultipleParams */
  ASTMultipleParams jjtn000 = new ASTMultipleParams(JJTMULTIPLEPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) MultipleParams */
          try {
/*@egen*/
	  (< IDENTIFIER >|(< DIGIT >)+)
	  (
	    < COMMA >
	    (
	      < IDENTIFIER >|(< DIGIT >)+)
	  )*/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed multiple parameters!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void PrintStatement() : {/*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) PrintStatement */
          try {
/*@egen*/
	  < PRINT >
	  < LEFT_PAREN >
	  < IDENTIFIER >
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Print Statement!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void CloseStatement() : {/*@bgen(jjtree) CloseStatement */
  ASTCloseStatement jjtn000 = new ASTCloseStatement(JJTCLOSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) CloseStatement */
          try {
/*@egen*/
	  < CLOSE >
	  < LEFT_PAREN >
	  < IDENTIFIER >
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Close Statement!\n"); }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	
    void IfStatement() : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IfStatement */
                try {
/*@egen*/
  		<IF><LEFT_PAREN>
  		Expression()
  		<RIGHT_PAREN><LEFT_CURLY >
  		Statement()
  		<RIGHT_CURLY >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    	{ System.out.println("Successfully parsed an if statement!\n"); }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
	void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
	{/*@bgen(jjtree) Expression */
                try {
/*@egen*/
  		{System.out.println("\nEXPRESSION STARTS");}
  		Operator()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
  		{System.out.println("EXPRESSION ENDS\n");}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void Operator() : {/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
  		<IDENTIFIER> 
  		expr_operator()  
  		Operand()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
	void Operand() : {/*@bgen(jjtree) Operand */
                          ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
	{/*@bgen(jjtree) Operand */
                 try {
/*@egen*/
 		 t=<DIGIT>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {System.out.println("Operand: " + t.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/
	}

	void expr_operator() :{/*@bgen(jjtree) expr_operator */
                               ASTexpr_operator jjtn000 = new ASTexpr_operator(JJTEXPR_OPERATOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;	}
	{/*@bgen(jjtree) expr_operator */
          try {
/*@egen*/
	  {System.out.println("Operator:");}
	  (< PLUS >|< MINUS >|< EQUALS >|< GREATER_THAN >|< LESS_THAN >)/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

