/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HtScrape.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  IGNORE_CASE=true;
                                               
                                                            
               
                 
    DEBUG_PARSER=true;
}

PARSER_BEGIN(HtScrape)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;
 
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class HtScrape/*@bgen(jjtree)*/implements HtScrapeTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTHtScrapeState jjtree = new JJTHtScrapeState();

/*@egen*/
    private static final String SOURCE_SUFFIX = ".txt";
    private static final String OUTPUT_SUFFIX = ".j";

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;

    private static ArrayList<SymTabEntry> variableList = new ArrayList<SymTabEntry>();
    private static int variableIndex = 0;
    
  public static void main(String args [])
  	throws Exception
  {
    	// Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

        // Process the source file path which ends in .pcl
        // and create the output file path which ends in .j
        String sourceFilePath = "in.txt";
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
            : sourceFilePath + OUTPUT_SUFFIX;

        // Parse a HtScrape program.
        Reader    reader = new FileReader(sourceFilePath);
        HtScrape parser = new HtScrape(reader);
        SimpleNode rootNode = parser.Program();

    	// Print the cross-reference table
   	 	CrossReferencer crossReferencer = new CrossReferencer();
    	crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);
        
    	// Print the parse tree
    	ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
    	treePrinter.print(symTabStack);

   		 // Create the compiler backend and generate code.
        Backend backend = BackendFactory.createBackend("compile");
        backend.process(iCode, symTabStack, objectFilePath);
  }
}

PARSER_END(HtScrape)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}


TOKEN: /*HtScrape Tokens */
{
  	<STRING_LITERAL:"\"" (~["\n","\r","\""])* ("\""|"\n"|"\r"|"\r\n")>
  	{ debugStream.println("STRING_LITERAL token: " + matchedToken.image); }
 	| 
    <CHARACTER:
    "'"(["a"-"z", "A"-"Z", "_"]|"\\"|["0"-"9"])"'"
    >  { debugStream.println("CHARACTER token: " + matchedToken.image); }
    |
    < INTEGER: ["1"-"9"](["0"-"9"])* | "0"(["0"-"7"])* | ("0x"|"0X")(["0"-"9"]|["a"-"z", "A"-"Z"])+ > 
	{ debugStream.println("INTEGER token: " + matchedToken.image); }
  	| 
    < NUMBER:
    (["0"-"9"])+ "." (["0"-"9"])*(["E","e"] (["+","-"])? (["0"-"9"])+)? |
	(["0"-"9"])+ (".")? (["0"-"9"])* ["E","e"] (["+","-"])? (["0"-"9"])+ |
	(["0"-"9"])* "." (["0"-"9"])+ (["E","e"] (["+","-"])? (["0"-"9"])+)? |
	(["0"-"9"])* (".")? (["0"-"9"])+ ["E","e"] (["+","-"])? (["0"-"9"])+
    >
   	{ debugStream.println("NUMBER token: " + matchedToken.image); }
  	| //reserved words
    <IF: "if" >
    { debugStream.println("IF token: " + matchedToken.image); }
    |
    <ELSE: "else" >
    { debugStream.println("ELSE token: " + matchedToken.image); }
    |
    < THEN: "then" >
    { debugStream.println("THEN token: " + matchedToken.image); }
    |
    < WHILE: "while" >
    { debugStream.println("WHILE token: " + matchedToken.image); }
  	| 
    <EXIT: "exit" >
    { debugStream.println("EXIT token: " + matchedToken.image); }
    |
    < THROW: "throw" >
    { debugStream.println("THROW token: " + matchedToken.image); }
    | 
    < BREAK: "break" >
    { debugStream.println("BREAK token: " + matchedToken.image); }
    |
    < VOID: "void" >
    { debugStream.println("VOID token: " + matchedToken.image); }
    |
    < RETURN: "return" >
    { debugStream.println("RETURN token: " + matchedToken.image); }
    |
	< PROCEDURE: "procedure" >
	{ debugStream.println("PROCEDURE token: " + matchedToken.image); }
	| 
    < INT: "int" >
    { debugStream.println("INT token: " + matchedToken.image); }
    |
    < NUM: "num" >
    { debugStream.println("INT token: " + matchedToken.image); }
    |
  	< STRING: "string">
  	{ debugStream.println("STRING token: " + matchedToken.image); }
 	| 
    < TRUE: "true" >
    { debugStream.println("TRUE token: " + matchedToken.image); }
    |
    < FALSE: "false" >
    { debugStream.println("FALSE token: " + matchedToken.image); }
    | 
    < TRY: "try" >
    { debugStream.println("TRY token: " + matchedToken.image); }
    |
    < CATCH: "catch" >
    { debugStream.println("CATCH token: " + matchedToken.image); }
    |
    < FOR: "for" >
    { debugStream.println("FOR token: " + matchedToken.image); }
    |
    < NULL: "null" >
    { debugStream.println("NULL token: " + matchedToken.image); }
    |
    < GET: "get" >
    { debugStream.println("GET token: " + matchedToken.image); }
    |
    < PRINT: "print" >
    { debugStream.println("PRINT token: " + matchedToken.image); }
    |
 	< PRINT_FULL_TABLE: "printFullTable" >
 	{ debugStream.println("PRINT_FULL_TABLE token: " + matchedToken.image); }
	|
 	< PRINT_DATA: "printData" >
 	{ debugStream.println("PRINT_DATA token: " + matchedToken.image); }
	|  
    <IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9","_", "-"])* >  
   	{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
    |
	// SPECIAL SYMBOLS
    < LEFT_PAREN: "(" >
    { debugStream.println("LEFT_PAREN token: " + matchedToken.image); }
  	|
  	< RIGHT_PAREN: ")" >
  	{ debugStream.println("RIGHT_PAREN token: " + matchedToken.image); }
 	|
 	< LEFT_CURLY: "{" >
	{ debugStream.println("LEFT_CURLY token: " + matchedToken.image); }
	| 
 	< RIGHT_CURLY: "}" >
	{ debugStream.println("RIGHT_CURLY token: " + matchedToken.image); }
	| 
	< PLUS: "+" >
 	{ debugStream.println("PLUS token: " + matchedToken.image); }
	|
	< MINUS: "-" >
 	{ debugStream.println("MINUS token: " + matchedToken.image); }
	|
	< MULTIPLY: "*" >
 	{ debugStream.println("MULTIPLY token: " + matchedToken.image); }
	|
	< DIVIDE: "/" >
 	{ debugStream.println("DIVIDE token: " + matchedToken.image); }
	|
 	< EQUALS: "=" >
 	{ debugStream.println("EQUALS token: " + matchedToken.image); }
	|
	< LESS_THAN: "<" >
	{ debugStream.println("LESS_THAN token: " + matchedToken.image); }
	|
	< GREATER_THAN: ">" >
	{ debugStream.println("GREATER_THAN token: " + matchedToken.image); }
	|
	< BANG: "!" >
	{ debugStream.println("BANG token: " + matchedToken.image); }
	|
	< COMMA: "," >
	{ debugStream.println("COMMA token: " + matchedToken.image); }
	|
	< PERIOD: "." >
	{ debugStream.println("PERIOD token: " + matchedToken.image); }
	|
	< SEMICOLON: ";" >
	{ debugStream.println("SEMICOLON token: " + matchedToken.image); }
	|
	< AT_SIGN: "@" >
	{ debugStream.println("AT_SIGN token: " + matchedToken.image); }
	|
	< POUND_SIGN: "#" >
	{ debugStream.println("POUND_SIGN token: " + matchedToken.image); }
	|
	< #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
	|
	< #DIGIT : [ "0"-"9" ] >
| <LESS_EQUAL : "<=">{ debugStream.println("LESS_EQUAL token: " + matchedToken.image); }
| <GREATER_EQUAL : ">=">{ debugStream.println("GREATER_EQUAL token: " + matchedToken.image); }
| <DOUBLE_EQUAL : "=="> { debugStream.println("DOUBLE_EQUAL token: " + matchedToken.image); }
| <NOT_EQUAL : "!="> { debugStream.println("NOT_EQUAL token: " + matchedToken.image); }
| <PLUS_PLUS : "++" > { debugStream.println("PLUS_PLUS token: " + matchedToken.image); }
| <PLUS_EQUAL : "+=" > { debugStream.println("PLUS_EQUAL token: " + matchedToken.image); }
| <MINUS_EQUAL : "-=" > { debugStream.println("MINUS_EQUAL token: " + matchedToken.image); }
| <MULTIPLY_EQUAL : "*=" > { debugStream.println("MULTIPLY_EQUAL token: " + matchedToken.image); }
| <DIVIDE_EQUAL : "/=" > { debugStream.println("DIVIDE_EQUAL token: " + matchedToken.image); }
}

	//production rules
	SimpleNode Program(): {/*@bgen(jjtree) Program */
                               ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/SimpleNode rootNode;}
	{/*@bgen(jjtree) Program */
          try {
/*@egen*/
	  {
	    programId = symTabStack.enterLocal("Prorgam");
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
	  }
	   try {
        rootNode = Statement()
        <EOF> {
          System.out.println("\n** Successfully parsed an entire Program!\n");
           return rootNode;
        }
    }
    catch (ParseException ex) {
        handleError(ex);
        return null;
    }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	  	
} 
 
	
	SimpleNode Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) Statement */
          try {
/*@egen*/
	  (
	    IntDeclaration() |
	    NumberDeclaration() |
	    StringDeclaration() |
	    lookahead()|
	    PrintStatement() |
	    PrintFullTableStatement()|
	    PrintDataStatement()|
	    IfStatement()|
	    WhileStatement()
	  )*/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {
	    return jjtn000;
	  }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	  
	}

	void variable() : {/*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variable */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

	void newVariable(TypeSpec type) : {/*@bgen(jjtree) newVariable */
  ASTnewVariable jjtn000 = new ASTnewVariable(JJTNEWVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) newVariable */
                try {
/*@egen*/
		<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/
		 {
		   SymTabEntry variableId = processVariableDecl(token, variableIndex++, variableList, type);
         jjtn000.setTypeSpec(type);
         jjtn000.setAttribute(ID, variableId);
         programId.setAttribute(ROUTINE_LOCALS_COUNT, variableIndex);
		 }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void IntDeclaration(): {/*@bgen(jjtree) IntDeclaration */
  ASTIntDeclaration jjtn000 = new ASTIntDeclaration(JJTINTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) IntDeclaration */
          try {
/*@egen*/
	  < INT >
	  {
          SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          TypeSpec type = typeId.getTypeSpec(); 
	  }
	  newVariable(type)
	  < EQUALS >
      integerConstant()
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {
	    System.out.println("Successfully parsed an Int Declaration!\n");
	  }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void NumberDeclaration(): {/*@bgen(jjtree) NumberDeclaration */
  ASTNumberDeclaration jjtn000 = new ASTNumberDeclaration(JJTNUMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) NumberDeclaration */
          try {
/*@egen*/
	  < NUM >
	  {
          SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          TypeSpec type = typeId.getTypeSpec(); 
	  }
	  newVariable(type)
	  < EQUALS >
      numberConstant()
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {
	    System.out.println("Successfully parsed a Number Declaration!\n");
	  }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void ArithmeticStatement() : {/*@bgen(jjtree) ArithmeticStatement */
  ASTArithmeticStatement jjtn000 = new ASTArithmeticStatement(JJTARITHMETICSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) ArithmeticStatement */
          try {
/*@egen*/
	  variable()
	  (< PLUS_EQUAL >|< MINUS_EQUAL >|< MULTIPLY_EQUAL >|< DIVIDE_EQUAL >)
	  Operator()
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {
	    System.out.println("Successfully parsed an Arithmetic Statement!\n");
	  }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	void lookahead() : {/*@bgen(jjtree) lookahead */
  ASTlookahead jjtn000 = new ASTlookahead(JJTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) lookahead */
          try {
/*@egen*/
	  (LOOKAHEAD(ArithmeticStatement())
	 	ArithmeticStatement()
		|
	 	lookahead2()
	 	)/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 	
	}
	void lookahead2() : {/*@bgen(jjtree) lookahead2 */
  ASTlookahead2 jjtn000 = new ASTlookahead2(JJTLOOKAHEAD2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) lookahead2 */
          try {
/*@egen*/
	  (LOOKAHEAD(SimpleAssignment())
	  SimpleAssignment()
		|
	  ComplexAssignment()
	)/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	void SimpleAssignment() : {/*@bgen(jjtree) SimpleAssignment */
  ASTSimpleAssignment jjtn000 = new ASTSimpleAssignment(JJTSIMPLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) SimpleAssignment */
          try {
/*@egen*/
	  variable()
	  < EQUALS >
	  (
	    integerConstant()
	  |
	  	stringConstant()
	  )
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Simple Assignment!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void ComplexAssignment() :{/*@bgen(jjtree) ComplexAssignment */
  ASTComplexAssignment jjtn000 = new ASTComplexAssignment(JJTCOMPLEXASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) ComplexAssignment */
          try {
/*@egen*/
	  variable()
	  < EQUALS >
	  Expression()
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Complex Assignment!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	
	void StringDeclaration() : {/*@bgen(jjtree) StringDeclaration */
  ASTStringDeclaration jjtn000 = new ASTStringDeclaration(JJTSTRINGDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) StringDeclaration */
          try {
/*@egen*/
	  < STRING >
	  {
        SymTabEntry typeId = symTabStack.lookup(token.image);
        typeId.appendLineNumber(token.beginLine);
        TypeSpec type = typeId.getTypeSpec(); 
	  }
	  newVariable(type)
	  < EQUALS >
	  stringConstant()
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a String Declaration!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	
	
	void MultipleParams() : {/*@bgen(jjtree) MultipleParams */
  ASTMultipleParams jjtn000 = new ASTMultipleParams(JJTMULTIPLEPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) MultipleParams */
          try {
/*@egen*/
	  (variable()|integerConstant()|numberConstant()|stringConstant())
	  (
	    < COMMA >
	    (
	      variable()|integerConstant()|numberConstant()|stringConstant())
	  )*/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed multiple parameters!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void PrintStatement() : {/*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) PrintStatement */
          try {
/*@egen*/
	  < PRINT >
	  < LEFT_PAREN >
	  variable()
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a Print Statement!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void PrintFullTableStatement() : {/*@bgen(jjtree) PrintFullTableStatement */
  ASTPrintFullTableStatement jjtn000 = new ASTPrintFullTableStatement(JJTPRINTFULLTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) PrintFullTableStatement */
          try {
/*@egen*/
	  < PRINT_FULL_TABLE >
	  < LEFT_PAREN >
	 	MultipleParams()
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a PrintFullStatement Statement!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void PrintDataStatement() : {/*@bgen(jjtree) PrintDataStatement */
  ASTPrintDataStatement jjtn000 = new ASTPrintDataStatement(JJTPRINTDATASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) PrintDataStatement */
          try {
/*@egen*/
	  < PRINT_DATA >
	  < LEFT_PAREN >
	  MultipleParams()
	  < RIGHT_PAREN >
	  < SEMICOLON >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  { System.out.println("Successfully parsed a PrintData Statement!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

    void IfStatement() : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) IfStatement */
                try {
/*@egen*/
  		<IF><LEFT_PAREN>Expression()<RIGHT_PAREN>
  		<LEFT_CURLY >
  			Statement()
  		<RIGHT_CURLY >
  		[ ElseStatement()]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    	{ System.out.println("Successfully parsed an if statement!\n"); }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	void ElseStatement() : {/*@bgen(jjtree) ElseStatement */
  ASTElseStatement jjtn000 = new ASTElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) ElseStatement */
                try {
/*@egen*/
		< ELSE >
  		< LEFT_CURLY >
  			Statement()
  		< RIGHT_CURLY >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
  		{
	    	System.out.println("Successfully parsed an ELSE Statement!\n");
	  	}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) WhileStatement */
          try {
/*@egen*/
	  < WHILE >
	  < LEFT_PAREN >
	  Expression()
	  < RIGHT_PAREN >
	  <LEFT_CURLY >
  	   	Statement()
  		<RIGHT_CURLY >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    	{ System.out.println("Successfully parsed an if statement!\n"); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
	{/*@bgen(jjtree) Expression */
                try {
/*@egen*/
  		{System.out.println("\nEXPRESSION STARTS");}
  		Operator()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
  		{System.out.println("EXPRESSION ENDS\n");}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void Operator() : {/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
  		Operand()
  		[
  		(
  		  (
  		    expr_operator()
  			Operand()
  			)
  		|
  		  (
  		    arith_operator()
  		    Operand()
  		  )+
  		)
  		]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
	void Operand() : {/*@bgen(jjtree) Operand */
                          ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
	{/*@bgen(jjtree) Operand */
                try {
/*@egen*/
	  	variable() 
 		|  integerConstant() | numberConstant() | stringConstant()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/
 		  {
 		    jjtn000.setAttribute(ID, token);
 		    //System.out.println("Operand: " + t.image);
 		  }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void expr_operator() :{/*@bgen(jjtree) expr_operator */
                               ASTexpr_operator jjtn000 = new ASTexpr_operator(JJTEXPR_OPERATOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;	}
	{/*@bgen(jjtree) expr_operator */
          try {
/*@egen*/
	  {System.out.println("Operator:");}
	  (< GREATER_THAN >|< LESS_THAN >|< LESS_EQUAL >|< GREATER_EQUAL >|< DOUBLE_EQUAL >|< NOT_EQUAL >)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {
	    jjtn000.setAttribute(ID, token);
	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void arith_operator() :{/*@bgen(jjtree) arith_operator */
                                ASTarith_operator jjtn000 = new ASTarith_operator(JJTARITH_OPERATOR);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) arith_operator */
          try {
/*@egen*/
	  {System.out.println("Operator:");}
	  (< PLUS >|< MINUS >|< MULTIPLY >|< DIVIDE >)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {
	    jjtn000.setAttribute(ID, token);
	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	
	void integerConstant() : {/*@bgen(jjtree) integerConstant */
  ASTintegerConstant jjtn000 = new ASTintegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) integerConstant */
    try {
/*@egen*/
    <INTEGER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    	}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
	}

	void numberConstant() : {/*@bgen(jjtree) numberConstant */
  ASTnumberConstant jjtn000 = new ASTnumberConstant(JJTNUMBERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) numberConstant */
    try {
/*@egen*/
    <NUMBER>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    	}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
	}

	void stringConstant() : {/*@bgen(jjtree) stringConstant */
  ASTstringConstant jjtn000 = new ASTstringConstant(JJTSTRINGCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) stringConstant */
    try {
/*@egen*/
    <STRING_LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, String.valueOf(token.image));
    	}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
	}
//Handles errors when parsing
/*JAVACODE 
public String errorHandler(ParseException exception) 
{
    Token token = exception.currentToken;
    System.out.println(ex.getMessage());
    do {token = getNextToken();} 
    while (token.kind != SEMICOLON);
    jjtThis.popNode();
    return token.image;
}*/
JAVACODE
SymTabEntry processVariableDecl(Token token, int index,
             ArrayList<SymTabEntry> variableList, TypeSpec type)      
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableId.setTypeSpec(type);
    variableList.add(variableId);
    return variableId;
}

JAVACODE
String handleError(ParseException ex)      
{
    Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    do {
    	token = getNextToken();
    } while (token.kind != SEMICOLON);

	jjtree.popNode();
    return token.image;
}