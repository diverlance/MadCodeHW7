/* Generated By:JJTree&JavaCC: Do not edit this line. HtScrapeTokenManager.java */
package wci.frontend;
import java.util.ArrayList;
import java.io.*;
import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

/** Token Manager. */
public class HtScrapeTokenManager implements HtScrapeConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ffffff800L) != 0L)
         {
            jjmatchedKind = 38;
            return 13;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 55;
         return -1;
      case 1:
         if ((active0 & 0x3ffffff000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 13;
         }
         if ((active0 & 0x800L) != 0L)
            return 13;
         return -1;
      case 2:
         if ((active0 & 0x7bd77f000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 2;
            }
            return 13;
         }
         if ((active0 & 0x3842880000L) != 0L)
            return 13;
         return -1;
      case 3:
         if ((active0 & 0x39b9558000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0x604227000L) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active0 & 0x1b9418000L) != 0L)
            return 13;
         if ((active0 & 0x3800140000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 4;
            }
            return 13;
         }
         return -1;
      case 5:
         if ((active0 & 0x3810000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 13;
         }
         if ((active0 & 0x140000L) != 0L)
            return 13;
         return -1;
      case 6:
         if ((active0 & 0x2810000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 13;
         return -1;
      case 7:
         if ((active0 & 0x2800000000L) != 0L)
            return 13;
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
            return 13;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 8;
            return 13;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 48);
      case 35:
         return jjStopAtPos(0, 53);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 43);
      case 44:
         return jjStopAtPos(0, 49);
      case 45:
         return jjStopAtPos(0, 44);
      case 46:
         return jjStartNfaWithStates_0(0, 50, 55);
      case 59:
         return jjStopAtPos(0, 51);
      case 60:
         return jjStopAtPos(0, 46);
      case 61:
         return jjStopAtPos(0, 45);
      case 62:
         return jjStopAtPos(0, 47);
      case 64:
         return jjStopAtPos(0, 52);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x121000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x5000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x202400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x3840000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x18a0a000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 123:
         return jjStopAtPos(0, 41);
      case 125:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x19400000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3840040000L);
      case 70:
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 13);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x422020000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80a10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80024000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x224400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x108000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 13);
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3801040000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 89:
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2001000000L);
      case 68:
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 13);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 13);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 13);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 13);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000L);
      case 78:
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20008000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100400000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 13);
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 72:
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 13);
         break;
      case 75:
      case 107:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 13);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 82:
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 13);
         break;
      case 87:
      case 119:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 71:
      case 103:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 13);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 13);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 13);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 13);
         break;
      case 82:
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 10);
                  else if (curChar == 47)
                     jjAddStates(11, 12);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(28, 33);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 48)
                     jjAddStates(16, 17);
                  if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(11);
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 2:
                  if ((0x400002400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 39 && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 10);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar != 46)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 46)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 39:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(28, 33);
                  break;
               case 40:
                  if (curChar == 48)
                     jjAddStates(16, 17);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if (curChar == 47)
                     jjAddStates(11, 12);
                  break;
               case 44:
                  if (curChar == 47)
                     jjCheckNAddStates(26, 28);
                  break;
               case 45:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 46:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 47:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 48:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 42)
                     jjAddStates(29, 30);
                  break;
               case 52:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 51);
                  break;
               case 53:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 51);
                  break;
               case 54:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(13);
                  break;
               case 1:
                  jjAddStates(13, 15);
                  break;
               case 6:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 41:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(42);
                  break;
               case 45:
                  jjAddStates(26, 28);
                  break;
               case 50:
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  jjCheckNAddTwoStates(53, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(26, 28);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(53, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 16, 21, 23, 26, 27, 32, 33, 34, 37, 38, 44, 49, 1, 2, 4, 
   41, 41, 32, 33, 34, 37, 21, 22, 23, 38, 45, 46, 48, 52, 54, 19, 
   20, 24, 25, 30, 31, 35, 36, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\53", "\55", "\75", "\74", "\76", "\41", "\54", "\56", "\73", 
"\100", "\43", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[55];
static private final int[] jjstateSet = new int[110];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public HtScrapeTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public HtScrapeTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("STRING_LITERAL token: " + matchedToken.image);
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         debugStream.println("CHARACTER token: " + matchedToken.image);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("INTEGER token: " + matchedToken.image);
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("NUMBER token: " + matchedToken.image);
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("IF token: " + matchedToken.image);
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("ELSE token: " + matchedToken.image);
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("THEN token: " + matchedToken.image);
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("EXIT token: " + matchedToken.image);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("THROW token: " + matchedToken.image);
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("BREAK token: " + matchedToken.image);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("VOID token: " + matchedToken.image);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("RETURN token: " + matchedToken.image);
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("INT token: " + matchedToken.image);
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("STRING token: " + matchedToken.image);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("TRUE token: " + matchedToken.image);
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("FALSE token: " + matchedToken.image);
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("TRY token: " + matchedToken.image);
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("CATCH token: " + matchedToken.image);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("FOR token: " + matchedToken.image);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("NULL token: " + matchedToken.image);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("TABLE token: " + matchedToken.image);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("TABLE_DATA token: " + matchedToken.image);
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("COLOR token: " + matchedToken.image);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("GET token: " + matchedToken.image);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("PRINT token: " + matchedToken.image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("CLOSE token: " + matchedToken.image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("FILE token: " + matchedToken.image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("LOAD token: " + matchedToken.image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("GET_TABLE token: " + matchedToken.image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("GET_DATA token: " + matchedToken.image);
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("GET_COLOR token: " + matchedToken.image);
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugStream.println("IDENTIFIER token: " + matchedToken.image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
      debugStream.println("LEFT_PAREN token: " + matchedToken.image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
          debugStream.println("RIGHT_PAREN token: " + matchedToken.image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
          debugStream.println("LEFT_CURLY token: " + matchedToken.image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
          debugStream.println("RIGHT_CURLY token: " + matchedToken.image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
          debugStream.println("PLUS token: " + matchedToken.image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
          debugStream.println("MINUS token: " + matchedToken.image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
          debugStream.println("EQUALS token: " + matchedToken.image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
          debugStream.println("LESS_THAN token: " + matchedToken.image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
          debugStream.println("GREATER_THAN token: " + matchedToken.image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
          debugStream.println("BANG token: " + matchedToken.image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
          debugStream.println("COMMA token: " + matchedToken.image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
          debugStream.println("PERIOD token: " + matchedToken.image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
          debugStream.println("SEMICOLON token: " + matchedToken.image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
          debugStream.println("AT_SIGN token: " + matchedToken.image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
          debugStream.println("POUND_SIGN token: " + matchedToken.image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
