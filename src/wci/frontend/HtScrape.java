/* Generated By:JJTree&JavaCC: Do not edit this line. HtScrape.java */
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class HtScrape/*@bgen(jjtree)*/implements HtScrapeTreeConstants, HtScrapeConstants {/*@bgen(jjtree)*/
  protected static JJTHtScrapeState jjtree = new JJTHtScrapeState();private static final String SOURCE_SUFFIX = ".hts";
    private static final String OUTPUT_SUFFIX = ".j";

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;

    private static ArrayList<SymTabEntry> variableList = new ArrayList<SymTabEntry>();
    private static int variableIndex = 0;

  public static void main(String args [])
        throws Exception
  {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

// Process the source file path which ends in .hts
        // and create the output file path which ends in .j
        String sourceFilePath = args[0];
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
            : sourceFilePath + OUTPUT_SUFFIX;

        // Parse a HtScrape program.
        Reader    reader = new FileReader(sourceFilePath);
        HtScrape parser = new HtScrape(reader);
        SimpleNode rootNode = parser.Program();

        // Print the cross-reference table
                CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);

                 // Create the compiler backend and generate code.
        Backend backend = BackendFactory.createBackend("compile");
        backend.process(iCode, symTabStack, objectFilePath);
  }

        //production rules
  static final public SimpleNode Program() throws ParseException {
    trace_call("Program");
    try {
                               /*@bgen(jjtree) Program */
                               ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
      try {
            programId = symTabStack.enterLocal("Prorgam");
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
        try {
          rootNode = Statement();
          jj_consume_token(0);
          System.out.println("\u005cn** Successfully parsed an entire Program!\u005cn");
           {if (true) return rootNode;}
        } catch (ParseException ex) {
        handleError(ex);
        {if (true) return null;}
        }
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Program");
    }
  }

  static final public SimpleNode Statement() throws ParseException {
    trace_call("Statement");
    try {
                                  /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case INT:
          case NUM:
          case STRING:
          case PRINT:
          case PRINT_FULL_TABLE:
          case PRINT_DATA:
          case GET_DATA:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            IntDeclaration();
            break;
          case NUM:
            NumberDeclaration();
            break;
          case STRING:
            StringDeclaration();
            break;
          case IDENTIFIER:
            lookahead();
            break;
          case PRINT:
            PrintStatement();
            break;
          case PRINT_FULL_TABLE:
            PrintFullTableStatement();
            break;
          case PRINT_DATA:
            PrintDataStatement();
            break;
          case GET_DATA:
            GetDataStatement();
            break;
          case IF:
            IfStatement();
            break;
          case WHILE:
            WhileStatement();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Statement");
    }
  }

  static final public void variable() throws ParseException {
    trace_call("variable");
    try {
                           /*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("variable");
    }
  }

  static final public void newVariable(TypeSpec type) throws ParseException {
    trace_call("newVariable");
    try {
                                           /*@bgen(jjtree) newVariable */
  ASTnewVariable jjtn000 = new ASTnewVariable(JJTNEWVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   SymTabEntry variableId = processVariableDecl(token, variableIndex++, variableList, type);
         jjtn000.setTypeSpec(type);
         jjtn000.setAttribute(ID, variableId);
         programId.setAttribute(ROUTINE_LOCALS_COUNT, variableIndex);
      } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("newVariable");
    }
  }

  static final public void IntDeclaration() throws ParseException {
    trace_call("IntDeclaration");
    try {
                                /*@bgen(jjtree) IntDeclaration */
  ASTIntDeclaration jjtn000 = new ASTIntDeclaration(JJTINTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INT);
          SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          TypeSpec type = typeId.getTypeSpec();
        newVariable(type);
        jj_consume_token(EQUALS);
        integerConstant();
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed an Int Declaration!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("IntDeclaration");
    }
  }

  static final public void NumberDeclaration() throws ParseException {
    trace_call("NumberDeclaration");
    try {
                                   /*@bgen(jjtree) NumberDeclaration */
  ASTNumberDeclaration jjtn000 = new ASTNumberDeclaration(JJTNUMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(NUM);
          SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          TypeSpec type = typeId.getTypeSpec();
        newVariable(type);
        jj_consume_token(EQUALS);
        numberConstant();
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a Number Declaration!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("NumberDeclaration");
    }
  }

  static final public void ArithmeticStatement() throws ParseException {
    trace_call("ArithmeticStatement");
    try {
                                      /*@bgen(jjtree) ArithmeticStatement */
  ASTArithmeticStatement jjtn000 = new ASTArithmeticStatement(JJTARITHMETICSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        variable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_EQUAL:
          jj_consume_token(PLUS_EQUAL);
          break;
        case MINUS_EQUAL:
          jj_consume_token(MINUS_EQUAL);
          break;
        case MULTIPLY_EQUAL:
          jj_consume_token(MULTIPLY_EQUAL);
          break;
        case DIVIDE_EQUAL:
          jj_consume_token(DIVIDE_EQUAL);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Operator();
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed an Arithmetic Statement!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("ArithmeticStatement");
    }
  }

  static final public void lookahead() throws ParseException {
    trace_call("lookahead");
    try {
                            /*@bgen(jjtree) lookahead */
  ASTlookahead jjtn000 = new ASTlookahead(JJTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_1(2147483647)) {
          ArithmeticStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            lookahead2();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("lookahead");
    }
  }

  static final public void lookahead2() throws ParseException {
    trace_call("lookahead2");
    try {
                             /*@bgen(jjtree) lookahead2 */
  ASTlookahead2 jjtn000 = new ASTlookahead2(JJTLOOKAHEAD2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_2(2147483647)) {
          SimpleAssignment();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ComplexAssignment();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("lookahead2");
    }
  }

  static final public void SimpleAssignment() throws ParseException {
    trace_call("SimpleAssignment");
    try {
                                   /*@bgen(jjtree) SimpleAssignment */
  ASTSimpleAssignment jjtn000 = new ASTSimpleAssignment(JJTSIMPLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        variable();
        jj_consume_token(EQUALS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          integerConstant();
          break;
        case STRING_LITERAL:
          stringConstant();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a Simple Assignment!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("SimpleAssignment");
    }
  }

  static final public void ComplexAssignment() throws ParseException {
    trace_call("ComplexAssignment");
    try {
                                   /*@bgen(jjtree) ComplexAssignment */
  ASTComplexAssignment jjtn000 = new ASTComplexAssignment(JJTCOMPLEXASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        variable();
        jj_consume_token(EQUALS);
        Expression();
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a Complex Assignment!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("ComplexAssignment");
    }
  }

  static final public void StringDeclaration() throws ParseException {
    trace_call("StringDeclaration");
    try {
                                    /*@bgen(jjtree) StringDeclaration */
  ASTStringDeclaration jjtn000 = new ASTStringDeclaration(JJTSTRINGDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(STRING);
        SymTabEntry typeId = symTabStack.lookup(token.image);
        typeId.appendLineNumber(token.beginLine);
        TypeSpec type = typeId.getTypeSpec();
        newVariable(type);
        jj_consume_token(EQUALS);
        stringConstant();
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a String Declaration!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("StringDeclaration");
    }
  }

  static final public void MultipleParams() throws ParseException {
    trace_call("MultipleParams");
    try {
                                 /*@bgen(jjtree) MultipleParams */
  ASTMultipleParams jjtn000 = new ASTMultipleParams(JJTMULTIPLEPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          variable();
          break;
        case INTEGER:
          integerConstant();
          break;
        case NUMBER:
          numberConstant();
          break;
        case STRING_LITERAL:
          stringConstant();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            variable();
            break;
          case INTEGER:
            integerConstant();
            break;
          case NUMBER:
            numberConstant();
            break;
          case STRING_LITERAL:
            stringConstant();
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed multiple parameters!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("MultipleParams");
    }
  }

  static final public void PrintStatement() throws ParseException {
    trace_call("PrintStatement");
    try {
                                 /*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PRINT);
        jj_consume_token(LEFT_PAREN);
        variable();
        jj_consume_token(RIGHT_PAREN);
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a Print Statement!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("PrintStatement");
    }
  }

  static final public void PrintFullTableStatement() throws ParseException {
    trace_call("PrintFullTableStatement");
    try {
                                          /*@bgen(jjtree) PrintFullTableStatement */
  ASTPrintFullTableStatement jjtn000 = new ASTPrintFullTableStatement(JJTPRINTFULLTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PRINT_FULL_TABLE);
        jj_consume_token(LEFT_PAREN);
        MultipleParams();
        jj_consume_token(RIGHT_PAREN);
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a PrintFullStatement Statement!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("PrintFullTableStatement");
    }
  }

  static final public void PrintDataStatement() throws ParseException {
    trace_call("PrintDataStatement");
    try {
                                     /*@bgen(jjtree) PrintDataStatement */
  ASTPrintDataStatement jjtn000 = new ASTPrintDataStatement(JJTPRINTDATASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PRINT_DATA);
        jj_consume_token(LEFT_PAREN);
        MultipleParams();
        jj_consume_token(RIGHT_PAREN);
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a PrintData Statement!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("PrintDataStatement");
    }
  }

  static final public void GetDataStatement() throws ParseException {
    trace_call("GetDataStatement");
    try {
                                   /*@bgen(jjtree) GetDataStatement */
  ASTGetDataStatement jjtn000 = new ASTGetDataStatement(JJTGETDATASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GET_DATA);
        jj_consume_token(LEFT_PAREN);
        MultipleParams();
        jj_consume_token(RIGHT_PAREN);
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            System.out.println("Successfully parsed a GetData Statement!\u005cn");
      } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("GetDataStatement");
    }
  }

  static final public void IfStatement() throws ParseException {
    trace_call("IfStatement");
    try {
                          /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        try {
          jj_consume_token(IF);
          jj_consume_token(LEFT_PAREN);
          Expression();
          jj_consume_token(RIGHT_PAREN);
          jj_consume_token(LEFT_CURLY);
          Statement();
          jj_consume_token(RIGHT_CURLY);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            ElseStatement();
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
        } catch (ParseException ex) {
                                         handleLoopError(ex);
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          System.out.println("Successfully parsed an if statement!\u005cn");
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("IfStatement");
    }
  }

  static final public void ElseStatement() throws ParseException {
    trace_call("ElseStatement");
    try {
                                /*@bgen(jjtree) ElseStatement */
  ASTElseStatement jjtn000 = new ASTElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ELSE);
        jj_consume_token(LEFT_CURLY);
        Statement();
        jj_consume_token(RIGHT_CURLY);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                System.out.println("Successfully parsed an ELSE Statement!\u005cn");
      } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("ElseStatement");
    }
  }

  static final public void WhileStatement() throws ParseException {
    trace_call("WhileStatement");
    try {
                                 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        try {
          jj_consume_token(WHILE);
          jj_consume_token(LEFT_PAREN);
          Expression();
          jj_consume_token(RIGHT_PAREN);
          jj_consume_token(LEFT_CURLY);
          Statement();
          jj_consume_token(RIGHT_CURLY);
        } catch (ParseException ex) {
                                         handleLoopError(ex);
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          System.out.println("Successfully parsed an if statement!\u005cn");
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("WhileStatement");
    }
  }

  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
                             /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
                 System.out.println("\u005cnEXPRESSION STARTS");
        Operator();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 System.out.println("EXPRESSION ENDS\u005cn");
      } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void Operator() throws ParseException {
    trace_call("Operator");
    try {
                           /*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Operand();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case MULTIPLY:
        case DIVIDE:
        case LESS_THAN:
        case GREATER_THAN:
        case LESS_EQUAL:
        case GREATER_EQUAL:
        case DOUBLE_EQUAL:
        case NOT_EQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LESS_THAN:
          case GREATER_THAN:
          case LESS_EQUAL:
          case GREATER_EQUAL:
          case DOUBLE_EQUAL:
          case NOT_EQUAL:
            expr_operator();
            Operand();
            break;
          case PLUS:
          case MINUS:
          case MULTIPLY:
          case DIVIDE:
            label_3:
            while (true) {
              arith_operator();
              Operand();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PLUS:
              case MINUS:
              case MULTIPLY:
              case DIVIDE:
                ;
                break;
              default:
                jj_la1[10] = jj_gen;
                break label_3;
              }
            }
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("Operator");
    }
  }

  static final public void Operand() throws ParseException {
    trace_call("Operand");
    try {
                          /*@bgen(jjtree) Operand */
                          ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          variable();
          break;
        case INTEGER:
          integerConstant();
          break;
        case NUMBER:
          numberConstant();
          break;
        case STRING_LITERAL:
          stringConstant();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setAttribute(ID, token);
                    //System.out.println("Operand: " + t.image);

          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("Operand");
    }
  }

  static final public void expr_operator() throws ParseException {
    trace_call("expr_operator");
    try {
                               /*@bgen(jjtree) expr_operator */
                               ASTexpr_operator jjtn000 = new ASTexpr_operator(JJTEXPR_OPERATOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
      try {
           System.out.println("Operator:");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATER_THAN:
          jj_consume_token(GREATER_THAN);
          break;
        case LESS_THAN:
          jj_consume_token(LESS_THAN);
          break;
        case LESS_EQUAL:
          jj_consume_token(LESS_EQUAL);
          break;
        case GREATER_EQUAL:
          jj_consume_token(GREATER_EQUAL);
          break;
        case DOUBLE_EQUAL:
          jj_consume_token(DOUBLE_EQUAL);
          break;
        case NOT_EQUAL:
          jj_consume_token(NOT_EQUAL);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setAttribute(ID, token);
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("expr_operator");
    }
  }

  static final public void arith_operator() throws ParseException {
    trace_call("arith_operator");
    try {
                                /*@bgen(jjtree) arith_operator */
                                ASTarith_operator jjtn000 = new ASTarith_operator(JJTARITH_OPERATOR);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
      try {
           System.out.println("Operator:");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setAttribute(ID, token);
      } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("arith_operator");
    }
  }

  static final public void integerConstant() throws ParseException {
    trace_call("integerConstant");
    try {
                                  /*@bgen(jjtree) integerConstant */
  ASTintegerConstant jjtn000 = new ASTintegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INTEGER);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("integerConstant");
    }
  }

  static final public void numberConstant() throws ParseException {
    trace_call("numberConstant");
    try {
                                 /*@bgen(jjtree) numberConstant */
  ASTnumberConstant jjtn000 = new ASTnumberConstant(JJTNUMBERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(NUMBER);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("numberConstant");
    }
  }

  static final public void stringConstant() throws ParseException {
    trace_call("stringConstant");
    try {
                                 /*@bgen(jjtree) stringConstant */
  ASTstringConstant jjtn000 = new ASTstringConstant(JJTSTRINGCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(STRING_LITERAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, String.valueOf(token.image));
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("stringConstant");
    }
  }

  static SymTabEntry processVariableDecl(Token token, int index,
             ArrayList<SymTabEntry> variableList, TypeSpec type) throws ParseException {
    trace_call("processVariableDecl");
    try {
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableId.setTypeSpec(type);
    variableList.add(variableId);
    return variableId;
    } finally {
      trace_return("processVariableDecl");
    }
  }

  static String handleError(ParseException ex) throws ParseException {
    trace_call("handleError");
    try {
    Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    do {
        token = getNextToken();
    } while (token.kind != SEMICOLON);

        jjtree.popNode();
    return token.image;
    } finally {
      trace_return("handleError");
    }
  }

  static String handleLoopError(ParseException ex) throws ParseException {
    trace_call("handleLoopError");
    try {
    Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    boolean popNow = false;
    Token temp;
    while(token.kind != RIGHT_CURLY || popNow == false)
    {
        if(token.kind == RIGHT_CURLY)
        {
            temp = token;
            token = getNextToken();
            if(token.kind != ELSE)
            {
                token = temp;
                popNow = true;
                break;
            }
        }
        else{token = getNextToken();}
    }
        jjtree.popNode();
    return token.image;
    } finally {
      trace_return("handleLoopError");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_17() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    if (jj_3R_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(EQUALS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    if (jj_3R_7()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HtScrapeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80e04800,0x80e04800,0x0,0x0,0x0,0x280,0x680,0x0,0x680,0x1000,0x0,0x0,0x0,0x680,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf,0xf,0xf0000000,0x8,0x8,0x0,0x8,0x10000,0x8,0x0,0xf00,0x7806f00,0x7806f00,0x8,0x7806000,0xf00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HtScrape(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HtScrape(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HtScrapeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HtScrape(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HtScrapeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HtScrape(HtScrapeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HtScrapeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
