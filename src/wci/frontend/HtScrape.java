/* HtScrape.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. HtScrape.java */
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class HtScrape/*@bgen(jjtree)*/implements HtScrapeTreeConstants, HtScrapeConstants {/*@bgen(jjtree)*/
  protected static JJTHtScrapeState jjtree = new JJTHtScrapeState();private static final String SOURCE_SUFFIX = ".txt";
    private static final String OUTPUT_SUFFIX = ".j";

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;

    private static ArrayList<SymTabEntry> variableList = new ArrayList<SymTabEntry>();
    private static int variableIndex = 0;

  public static void main(String args [])
        throws Exception
  {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

        // Process the source file path which ends in .pcl
        // and create the output file path which ends in .j
        String sourceFilePath = "in.txt";
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
            : sourceFilePath + OUTPUT_SUFFIX;

        // Parse a HtScrape program.
        Reader    reader = new FileReader(sourceFilePath);
        HtScrape parser = new HtScrape(reader);
        SimpleNode rootNode = parser.Program();

        // Print the cross-reference table
                CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);

                 // Create the compiler backend and generate code.
        Backend backend = BackendFactory.createBackend("compile");
        backend.process(iCode, symTabStack, objectFilePath);
  }

//production rules
  static final public         SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
                               ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
    try {
programId = symTabStack.enterLocal("Prorgam");
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
      try {
        rootNode = Statement();
        jj_consume_token(0);
System.out.println("\u005cn** Successfully parsed an entire Program!\u005cn");
           {if ("" != null) return rootNode;}
      } catch (ParseException ex) {
handleError(ex);
        {if ("" != null) return null;}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:
        case IF:
        case WHILE:
        case INT:
        case STRING:
        case PRINT:
        case PRINT_FULL_TABLE:
        case PRINT_DATA:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:{
          IntDeclaration();
          break;
          }
        case NUMBER:{
          NumberDeclaration();
          break;
          }
        case STRING:{
          StringDeclaration();
          break;
          }
        case IDENTIFIER:{
          lookahead();
          break;
          }
        case PRINT:{
          PrintStatement();
          break;
          }
        case PRINT_FULL_TABLE:{
          PrintFullTableStatement();
          break;
          }
        case PRINT_DATA:{
          PrintDataStatement();
          break;
          }
        case IF:{
          IfStatement();
          break;
          }
        case WHILE:{
          WhileStatement();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void variable() throws ParseException {/*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void newVariable(TypeSpec type) throws ParseException {/*@bgen(jjtree) newVariable */
  ASTnewVariable jjtn000 = new ASTnewVariable(JJTNEWVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
SymTabEntry variableId = processVariableDecl(token, variableIndex++, variableList, type);
         jjtn000.setTypeSpec(type);
         jjtn000.setAttribute(ID, variableId);
         programId.setAttribute(ROUTINE_LOCALS_COUNT, variableIndex);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void IntDeclaration() throws ParseException {/*@bgen(jjtree) IntDeclaration */
  ASTIntDeclaration jjtn000 = new ASTIntDeclaration(JJTINTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          TypeSpec type = typeId.getTypeSpec();
      newVariable(type);
      jj_consume_token(EQUALS);
      integerConstant();
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed an Int Declaration!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void NumberDeclaration() throws ParseException {/*@bgen(jjtree) NumberDeclaration */
  ASTNumberDeclaration jjtn000 = new ASTNumberDeclaration(JJTNUMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMBER);
SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          TypeSpec type = typeId.getTypeSpec();
      newVariable(type);
      jj_consume_token(EQUALS);
      numberConstant();
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a Number Declaration!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void ArithmeticStatement() throws ParseException {/*@bgen(jjtree) ArithmeticStatement */
  ASTArithmeticStatement jjtn000 = new ASTArithmeticStatement(JJTARITHMETICSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(INCREASE);
      Operand();
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed an Arithmetic Statement!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void lookahead() throws ParseException {/*@bgen(jjtree) lookahead */
  ASTlookahead jjtn000 = new ASTlookahead(JJTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        ArithmeticStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          lookahead2();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void lookahead2() throws ParseException {/*@bgen(jjtree) lookahead2 */
  ASTlookahead2 jjtn000 = new ASTlookahead2(JJTLOOKAHEAD2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        SimpleAssignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ComplexAssignment();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void SimpleAssignment() throws ParseException {/*@bgen(jjtree) SimpleAssignment */
  ASTSimpleAssignment jjtn000 = new ASTSimpleAssignment(JJTSIMPLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        integerConstant();
        break;
        }
      case STRING_LITERAL:{
        stringConstant();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a Simple Assignment!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void ComplexAssignment() throws ParseException {/*@bgen(jjtree) ComplexAssignment */
  ASTComplexAssignment jjtn000 = new ASTComplexAssignment(JJTCOMPLEXASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(EQUALS);
      Expression();
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a Complex Assignment!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void StringDeclaration() throws ParseException {/*@bgen(jjtree) StringDeclaration */
  ASTStringDeclaration jjtn000 = new ASTStringDeclaration(JJTSTRINGDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
SymTabEntry typeId = symTabStack.lookup(token.image);
        typeId.appendLineNumber(token.beginLine);
        TypeSpec type = typeId.getTypeSpec();
      newVariable(type);
      jj_consume_token(EQUALS);
      stringConstant();
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a String Declaration!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void MultipleParams() throws ParseException {/*@bgen(jjtree) MultipleParams */
  ASTMultipleParams jjtn000 = new ASTMultipleParams(JJTMULTIPLEPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case INTEGER:{
        integerConstant();
        break;
        }
      case NUMBER:{
        numberConstant();
        break;
        }
      case STRING_LITERAL:{
        stringConstant();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          variable();
          break;
          }
        case INTEGER:{
          integerConstant();
          break;
          }
        case NUMBER:{
          numberConstant();
          break;
          }
        case STRING_LITERAL:{
          stringConstant();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed multiple parameters!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void PrintStatement() throws ParseException {/*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      jj_consume_token(LEFT_PAREN);
      stringConstant();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a Print Statement!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void PrintFullTableStatement() throws ParseException {/*@bgen(jjtree) PrintFullTableStatement */
  ASTPrintFullTableStatement jjtn000 = new ASTPrintFullTableStatement(JJTPRINTFULLTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT_FULL_TABLE);
      jj_consume_token(LEFT_PAREN);
      MultipleParams();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a PrintFullStatement Statement!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void PrintDataStatement() throws ParseException {/*@bgen(jjtree) PrintDataStatement */
  ASTPrintDataStatement jjtn000 = new ASTPrintDataStatement(JJTPRINTDATASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT_DATA);
      jj_consume_token(LEFT_PAREN);
      MultipleParams();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("Successfully parsed a PrintData Statement!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LEFT_PAREN);
      Expression();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(LEFT_CURLY);
      Statement();
      jj_consume_token(RIGHT_CURLY);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
System.out.println("Successfully parsed an if statement!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LEFT_PAREN);
      Expression();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(LEFT_CURLY);
      Statement();
      jj_consume_token(RIGHT_CURLY);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
System.out.println("Successfully parsed an if statement!\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
System.out.println("\u005cnEXPRESSION STARTS");
      Operator();
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
System.out.println("EXPRESSION ENDS\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Operator() throws ParseException {/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Operand();
      expr_operator();
      Operand();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Operand() throws ParseException {/*@bgen(jjtree) Operand */
                          ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setAttribute(ID, token);
                    System.out.println("Operand: " + t.image);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void expr_operator() throws ParseException {/*@bgen(jjtree) expr_operator */
                               ASTexpr_operator jjtn000 = new ASTexpr_operator(JJTEXPR_OPERATOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("Operator:");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GREATER_THAN:{
        jj_consume_token(GREATER_THAN);
        break;
        }
      case LESS_THAN:{
        jj_consume_token(LESS_THAN);
        break;
        }
      case LESS_EQUAL:{
        jj_consume_token(LESS_EQUAL);
        break;
        }
      case GREATER_EQUAL:{
        jj_consume_token(GREATER_EQUAL);
        break;
        }
      case DOUBLE_EQUAL:{
        jj_consume_token(DOUBLE_EQUAL);
        break;
        }
      case NOT_EQUAL:{
        jj_consume_token(NOT_EQUAL);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.setAttribute(ID, token);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void arith_operator() throws ParseException {/*@bgen(jjtree) arith_operator */
                                ASTarith_operator jjtn000 = new ASTarith_operator(JJTARITH_OPERATOR);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("Operator:");
      jj_consume_token(INCREASE);
      Operand();
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.setAttribute(ID, token);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void integerConstant() throws ParseException {/*@bgen(jjtree) integerConstant */
  ASTintegerConstant jjtn000 = new ASTintegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void numberConstant() throws ParseException {/*@bgen(jjtree) numberConstant */
  ASTnumberConstant jjtn000 = new ASTnumberConstant(JJTNUMBERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void stringConstant() throws ParseException {/*@bgen(jjtree) stringConstant */
  ASTstringConstant jjtn000 = new ASTstringConstant(JJTSTRINGCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, String.valueOf(token.image));
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static SymTabEntry processVariableDecl(Token token, int index,
             ArrayList<SymTabEntry> variableList, TypeSpec type) throws ParseException {SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableId.setTypeSpec(type);
    variableList.add(variableId);
    return variableId;
  }

  static String handleError(ParseException ex) throws ParseException {Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    do {
        token = getNextToken();
    } while (token.kind != SEMICOLON);

        jjtree.popNode();
    return token.image;
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_4()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_3()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HtScrapeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe0304c00,0xe0304c00,0x0,0x0,0x280,0x680,0x0,0x680,0x200,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x1,0x1,0x0,0x1,0x800,0x1,0x1,0x3c0300,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HtScrape(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HtScrape(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HtScrapeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HtScrape(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HtScrapeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HtScrape(HtScrapeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HtScrapeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
